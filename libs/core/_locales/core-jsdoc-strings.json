{
  "Array": "Add, remove, and replace items in lists.",
  "Array._popStatement": "Remove the last element from an array and return it.",
  "Array._removeAtStatement": "Remove the element at a certain index.",
  "Array._shiftStatement": "Remove the first element from an array and return it. This method changes the length of the array.",
  "Array._unshiftStatement": "Add one element to the beginning of an array and return the new length of the array.",
  "Array.concat": "Concatenates the values with another array.",
  "Array.concat|param|arr": "The other array that is being concatenated with",
  "Array.every": "Tests whether all elements in the array pass the test implemented by the provided function.",
  "Array.every|param|callbackfn": "A function that accepts up to two arguments. The every method calls the callbackfn function one time for each element in the array.",
  "Array.fill": "Fills all the elements of an array from a start index to an end index with a static value. The end index is not included.",
  "Array.filter": "Return the elements of an array that meet the condition specified in a callback function.",
  "Array.filter|param|callbackfn": "A function that accepts up to two arguments. The filter method calls the callbackfn function one time for each element in the array.",
  "Array.find": "Returns the value of the first element in the array that satisfies the provided testing function. Otherwise undefined is returned.",
  "Array.forEach": "Call a defined callback function on each element of an array.",
  "Array.forEach|param|callbackfn": "A function that accepts up to two arguments. The forEach method calls the callbackfn function one time for each element in the array.",
  "Array.get": "Get the value at a particular index",
  "Array.get|param|index": "the zero-based position in the list of the item, eg: 0",
  "Array.indexOf": "Return the index of the first occurrence of a value in an array.",
  "Array.indexOf|param|fromIndex": "The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",
  "Array.indexOf|param|item": "The value to locate in the array.",
  "Array.insertAt": "Insert the value at a particular index, increases length by 1",
  "Array.insertAt|param|index": "the zero-based position in the list to insert the value, eg: 0",
  "Array.isArray": "Check if a given object is an array.",
  "Array.join": "joins all elements of an array into a string and returns this string.",
  "Array.join|param|sep": "the string separator",
  "Array.length": "Get or set the length of an array. This number is one more than the index of the last element the array.",
  "Array.map": "Call a defined callback function on each element of an array, and return an array containing the results.",
  "Array.map|param|callbackfn": "A function that accepts up to two arguments. The map method calls the callbackfn function one time for each element in the array.",
  "Array.pop": "Remove the last element from an array and return it.",
  "Array.push": "Append a new element to an array.",
  "Array.reduce": "Call the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
  "Array.reduce|param|callbackfn": "A function that accepts up to three arguments. The reduce method calls the callbackfn function one time for each element in the array.",
  "Array.reduce|param|initialValue": "Initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
  "Array.removeAt": "Remove the element at a certain index.",
  "Array.removeElement": "Remove the first occurence of an object. Returns true if removed.",
  "Array.reverse": "Reverse the elements in an array. The first array element becomes the last, and the last array element becomes the first.",
  "Array.set": "Store a value at a particular index",
  "Array.set|param|index": "the zero-based position in the list to store the value, eg: 0",
  "Array.shift": "Remove the first element from an array and return it. This method changes the length of the array.",
  "Array.slice": "Return a section of an array.",
  "Array.slice|param|end": "The end of the specified portion of the array. eg: 0",
  "Array.slice|param|start": "The beginning of the specified portion of the array. eg: 0",
  "Array.some": "Tests whether at least one element in the array passes the test implemented by the provided function.",
  "Array.some|param|callbackfn": "A function that accepts up to two arguments. The some method calls the callbackfn function one time for each element in the array.",
  "Array.sort": "Sort the elements of an array in place and returns the array. The sort is not necessarily stable.",
  "Array.splice": "Remove elements from an array.",
  "Array.splice|param|deleteCount": "The number of elements to remove. eg: 0",
  "Array.splice|param|start": "The zero-based location in the array from which to start removing elements. eg: 0",
  "Array.unshift": "Add one element to the beginning of an array and return the new length of the array.",
  "Array@type": "Add, remove, and replace items in lists.",
  "Boolean.toString": "Returns a string representation of an object.",
  "Infinity": "Constant representing positive infinity.",
  "Math": "More complex operations with numbers.",
  "Math.abs": "Returns the absolute value of a number (the value without regard to whether it is positive or negative).\nFor example, the absolute value of -5 is the same as the absolute value of 5.",
  "Math.abs|param|x": "A numeric expression for which the absolute value is needed.",
  "Math.acos": "Returns the arccosine (in radians) of a number",
  "Math.acos|param|x": "A number",
  "Math.asin": "Returns the arcsine (in radians) of a number",
  "Math.asin|param|x": "A number",
  "Math.atan": "Returns the arctangent (in radians) of a number",
  "Math.atan2": "Returns the arctangent of the quotient of its arguments.",
  "Math.atan2|param|x": "A number",
  "Math.atan2|param|y": "A number",
  "Math.atan|param|x": "A number",
  "Math.ceil": "Returns the smallest number greater than or equal to its numeric argument.",
  "Math.ceil|param|x": "A numeric expression.",
  "Math.cos": "Returns the cosine of a number.",
  "Math.cos|param|x": "An angle in radians",
  "Math.exp": "Returns returns ``e^x``.",
  "Math.exp|param|x": "A number",
  "Math.floor": "Returns the greatest number less than or equal to its numeric argument.",
  "Math.floor|param|x": "A numeric expression.",
  "Math.idiv": "Returns the value of integer signed 32 bit division of two numbers.",
  "Math.idiv|param|x": "The first number",
  "Math.idiv|param|y": "The second number",
  "Math.imul": "Returns the value of integer signed 32 bit multiplication of two numbers.",
  "Math.imul|param|x": "The first number",
  "Math.imul|param|y": "The second number",
  "Math.log": "Returns the natural logarithm (base e) of a number.",
  "Math.log|param|x": "A number",
  "Math.max": "Returns the larger of two supplied numeric expressions.",
  "Math.min": "Returns the smaller of two supplied numeric expressions.",
  "Math.pow": "Returns the value of a base expression taken to a specified power.",
  "Math.pow|param|x": "The base value of the expression.",
  "Math.pow|param|y": "The exponent value of the expression.",
  "Math.random": "Returns a pseudorandom number between 0 and 1.",
  "Math.randomRange": "Returns a pseudorandom number between min and max included.\nIf both numbers are integral, the result is integral.",
  "Math.randomRange|param|max": "the upper inclusive bound, eg: 10",
  "Math.randomRange|param|min": "the lower inclusive bound, eg: 0",
  "Math.round": "Returns a supplied numeric expression rounded to the nearest number.",
  "Math.roundWithPrecision": "Rounds ``x`` to a number with the given number of ``digits``",
  "Math.roundWithPrecision|param|digits": "the number of resulting digits",
  "Math.roundWithPrecision|param|x": "the number to round",
  "Math.round|param|x": "The value to be rounded to the nearest number.",
  "Math.sign": "Returns the sign of the x, indicating whether x is positive, negative or zero.",
  "Math.sign|param|x": "The numeric expression to test",
  "Math.sin": "Returns the sine of a number.",
  "Math.sin|param|x": "An angle in radians",
  "Math.sqrt": "Returns the square root of a number.",
  "Math.sqrt|param|x": "A numeric expression.",
  "Math.tan": "Returns the tangent of a number.",
  "Math.tan|param|x": "An angle in radians",
  "Math.trunc": "Returns the number with the decimal part truncated.",
  "Math.trunc|param|x": "A numeric expression.",
  "NaN": "Constant representing Not-A-Number.",
  "Number.isNaN": "Check if a given value is of type Number and it is a NaN.",
  "Number.toString": "Returns a string representation of a number.",
  "Object.keys": "Return the field names in an object.",
  "String": "Combine, split, and search text strings.",
  "String.charAt": "Return the character at the specified index.",
  "String.charAt|param|index": "The zero-based index of the desired character.",
  "String.charCodeAt": "Return the Unicode value of the character at the specified location.",
  "String.charCodeAt|param|index": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
  "String.compare": "See how the order of characters in two strings is different (in ASCII encoding).",
  "String.compare|param|that": "String to compare to target string",
  "String.concat": "Returns a string that contains the concatenation of two or more strings.",
  "String.concat|param|other": "The string to append to the end of the string.",
  "String.fromCharCode": "Make a string from the given ASCII character code.",
  "String.includes": "Determines whether a string contains the characters of a specified string.",
  "String.includes|param|searchValue": "the text to find",
  "String.includes|param|start": "optional start index for the search",
  "String.indexOf": "Returns the position of the first occurrence of a specified value in a string.",
  "String.indexOf|param|searchValue": "the text to find",
  "String.indexOf|param|start": "optional start index for the search",
  "String.isEmpty": "Returns a value indicating if the string is empty",
  "String.length": "Returns the length of a String object.",
  "String.replace": "Return the current string with the first occurence of toReplace\nreplaced with the replacer\n\n\nor a function that accepts the substring and returns the replacement string.",
  "String.replaceAll": "Return the current string with each occurence of toReplace\nreplaced with the replacer\n\n\nor a function that accepts the substring and returns the replacement string.",
  "String.replaceAll|param|replacer": "either the string that replaces toReplace in the current string,",
  "String.replaceAll|param|toReplace": "the substring to replace in the current string",
  "String.replace|param|replacer": "either the string that replaces toReplace in the current string,",
  "String.replace|param|toReplace": "the substring to replace in the current string",
  "String.slice": "Return a substring of the current string.",
  "String.slice|param|end": "one-past-last character index",
  "String.slice|param|start": "first character index; can be negative from counting from the end, eg:0",
  "String.split": "Splits the string according to the separators",
  "String.split|param|separator": "@param limit",
  "String.substr": "Return a substring of the current string.",
  "String.substr|param|length": "number of characters to extract",
  "String.substr|param|start": "first character index; can be negative from counting from the end, eg:0",
  "String.toLowerCase": "Converts the string to lower case characters.",
  "String.trim": "Return a substring of the current string with whitespace removed from both ends",
  "String@type": "Combine, split, and search text strings.",
  "StringMap": "A dictionary from string key to string values",
  "operators": "Move and rotate shapes",
  "operators.addShapes": "Add shapes together. Sometimes called \"union\".",
  "operators.addShapes|param|body": "List of shapes to add",
  "operators.flipShapes": "Flip along the X axis",
  "operators.flipShapes|param|body": "the shapes to rotate",
  "operators.flipShapes|param|x": "the amount, in degrees to rotate",
  "operators.intersectShapes": "Intersect shapes - only leave the parts from all shapes that overlap.",
  "operators.intersectShapes|param|body": "List of shapes to intersect",
  "operators.moveShapesAcross": "move shapes across the x axis",
  "operators.moveShapesAcross|param|body": "the shapes to move across",
  "operators.moveShapesAcross|param|x": "how far to move across the x axis",
  "operators.moveShapesOver": "move shapes over on the y axis",
  "operators.moveShapesOver|param|body": "the shapes to move across",
  "operators.moveShapesOver|param|y": "the amount to move over",
  "operators.moveShapesUp": "move shapes up the z axis",
  "operators.moveShapesUp|param|body": "the shapes to move up",
  "operators.moveShapesUp|param|z": "the amount to move up (in the air)",
  "operators.rollShapes": "Roll shapes along Y axis",
  "operators.rollShapes|param|body": "the shapes to rotate",
  "operators.rollShapes|param|y": "the amount, in degrees to rotate in Y axis",
  "operators.rotateShapes": "Perform a rotation in X, Y and Z axis",
  "operators.rotateShapes|param|body": "The shapes to rotate",
  "operators.rotateShapes|param|x": "Rotation in X, degrees",
  "operators.rotateShapes|param|y": "Rotation in X, degrees",
  "operators.rotateShapes|param|z": "Rotation in X, degrees",
  "operators.sequentialWrap2DShapes": "For 2D shapes, apply a shrink wrapping function one at a time to get a progressive effect.  Also known as \"chain hull\"",
  "operators.sequentialWrap2DShapes|param|body": "The list of 2d shapes to sequentially shrink wrap",
  "operators.spinShapes": "Spin shapes in Z axis",
  "operators.spinShapes|param|body": "the shapes to rotate",
  "operators.spinShapes|param|z": "the amount, in degrees to rotate in Z axis",
  "operators.stackShapes": "move shapes up the z axis",
  "operators.stackShapes|param|body": "the shapes to move up",
  "operators.subtractShapes": "From the first shape, cut away all other shapes.  Sometimes called \"difference\"",
  "operators.subtractShapes|param|body": "List of shapes to subtract",
  "operators.translateShapes": "Move shapes in three dimensions",
  "operators.translateShapes|param|body": "The list of shapes to move",
  "operators.translateShapes|param|x": "How far to move across in x",
  "operators.translateShapes|param|y": "How far to move over in y",
  "operators.translateShapes|param|z": "How far to move up in z",
  "operators.wrap2DShapes": "For 2D shapes, apply a shrinkwrapping technique to join them together.  Also known as hull.",
  "operators.wrap2DShapes|param|body": "List of 2D shapes to shrink wrap",
  "parseFloat": "Convert a string to a number.",
  "parseInt": "Convert a string to an integer.\n\n\nIf this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal.\nAll other strings are considered decimal.",
  "parseInt|param|radix": "optional A value between 2 and 36 that specifies the base of the number in text.",
  "parseInt|param|text": "A string to convert into an integral number. eg: \"123\"",
  "randint": "Returns a pseudorandom number between min and max included.\nIf both numbers are integral, the result is integral.",
  "randint|param|max": "the upper inclusive bound, eg: 10",
  "randint|param|min": "the lower inclusive bound, eg: 0",
  "shapes": "How to set fields and colours\n@external https://makecode.com/playground#basic-default-values\n@external https://makecode.com/extensions/getting-started/simple-extension\nuse the playground to configure the pickers\n\n3D Shapes to create on the surface",
  "shapes.cone": "* @param radius The radius of the cone",
  "shapes.cone|param|centerZ": "Whether or not the cone centers around the Z axis.  Most likely you want to use move/translate instead.",
  "shapes.cone|param|color": "The color to use for the cone",
  "shapes.cone|param|faces": "The number of faces the cone has.  The more it has, the smoother it is, but longer it takes to render.  So choose wisely!",
  "shapes.cone|param|height": "How high to make the cone",
  "shapes.cube": "Add a cube",
  "shapes.cube|param|color": "If specified, what color to make the cube.  In hex (0xab1234)",
  "shapes.cube|param|depth": "The depth of the cube",
  "shapes.cube|param|height": "The height of the cube",
  "shapes.cube|param|width": "The width of the cube",
  "shapes.cylinder": "Add a cylinder",
  "shapes.cylinder|param|centerZ": "Use this if you dont want to center above the z axis, otherwise use move or transform",
  "shapes.cylinder|param|color": "The color of the cylinder in hex (0xab1234)",
  "shapes.cylinder|param|faces": "The number of faces the cylinder has.  The more it has, the smoother it is, but longer it takes to render.  So choose wisely!",
  "shapes.cylinder|param|height": "How tall to make the cylinder",
  "shapes.cylinder|param|radius": "The radius (distance from center to edge) of the cylinder",
  "shapes.cylinder|param|radius2": "If specified, make the bottom of the cylinder have a different size",
  "shapes.donut": "* @param thickness How thick to make the donut",
  "shapes.donut|param|color": "Color (in hex 0xab12345)",
  "shapes.donut|param|innerFaces": "How many faces on the inside of the object",
  "shapes.donut|param|innerRotation": "How far to turn the inside (useful if the number of inner faces is small)",
  "shapes.donut|param|outerFaces": "How many faces on the outside of the object",
  "shapes.donut|param|radius": "The radius of the donut",
  "shapes.sphere": "Add a sphere",
  "shapes.sphere|param|centerZ": "Whether to center around the z axis.  By default this is false.",
  "shapes.sphere|param|color": "The color to make the sphere",
  "shapes.sphere|param|faces": "How many faces to use to make the sphere.  The more you use the longer it takes to render, so choose wisely!",
  "shapes.sphere|param|radius": "The distance from the center to the edge of the sphere ",
  "shapes.sphere|param|type": "Whether to use geodesic or icosahedron.  Geodesic is more triangular and has a golf-ball like appearance.",
  "shapes.text": "Add text",
  "shapes.text|param|color": "The color of the text",
  "shapes.text|param|height": "How tall to extrude the text",
  "shapes.text|param|lineWidth": "How thick to make the text",
  "shapes.text|param|text": "The text to add"
}