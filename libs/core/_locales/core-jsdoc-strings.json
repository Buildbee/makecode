{
  "Array": "Add, remove, and replace items in lists.",
  "Array._pickRandom": "Return a random value from the array",
  "Array._popStatement": "Remove the last element from an array and return it.",
  "Array._removeAtStatement": "Remove the element at a certain index.",
  "Array._shiftStatement": "Remove the first element from an array and return it. This method changes the length of the array.",
  "Array._unshiftStatement": "Add one element to the beginning of an array and return the new length of the array.",
  "Array.concat": "Concatenates the values with another array.",
  "Array.concat|param|arr": "The other array that is being concatenated with",
  "Array.every": "Tests whether all elements in the array pass the test implemented by the provided function.",
  "Array.every|param|callbackfn": "A function that accepts up to two arguments. The every method calls the callbackfn function one time for each element in the array.",
  "Array.fill": "Fills all the elements of an array from a start index to an end index with a static value. The end index is not included.",
  "Array.filter": "Return the elements of an array that meet the condition specified in a callback function.",
  "Array.filter|param|callbackfn": "A function that accepts up to two arguments. The filter method calls the callbackfn function one time for each element in the array.",
  "Array.find": "Returns the value of the first element in the array that satisfies the provided testing function. Otherwise undefined is returned.",
  "Array.forEach": "Call a defined callback function on each element of an array.",
  "Array.forEach|param|callbackfn": "A function that accepts up to two arguments. The forEach method calls the callbackfn function one time for each element in the array.",
  "Array.get": "Get the value at a particular index",
  "Array.get|param|index": "the zero-based position in the list of the item, eg: 0",
  "Array.indexOf": "Return the index of the first occurrence of a value in an array.",
  "Array.indexOf|param|fromIndex": "The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",
  "Array.indexOf|param|item": "The value to locate in the array.",
  "Array.insertAt": "Insert the value at a particular index, increases length by 1",
  "Array.insertAt|param|index": "the zero-based position in the list to insert the value, eg: 0",
  "Array.isArray": "Check if a given object is an array.",
  "Array.join": "joins all elements of an array into a string and returns this string.",
  "Array.join|param|sep": "the string separator",
  "Array.length": "Get or set the length of an array. This number is one more than the index of the last element the array.",
  "Array.map": "Call a defined callback function on each element of an array, and return an array containing the results.",
  "Array.map|param|callbackfn": "A function that accepts up to two arguments. The map method calls the callbackfn function one time for each element in the array.",
  "Array.pop": "Remove the last element from an array and return it.",
  "Array.push": "Append a new element to an array.",
  "Array.reduce": "Call the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
  "Array.reduce|param|callbackfn": "A function that accepts up to three arguments. The reduce method calls the callbackfn function one time for each element in the array.",
  "Array.reduce|param|initialValue": "Initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
  "Array.removeAt": "Remove the element at a certain index.",
  "Array.removeElement": "Remove the first occurence of an object. Returns true if removed.",
  "Array.reverse": "Reverse the elements in an array. The first array element becomes the last, and the last array element becomes the first.",
  "Array.set": "Store a value at a particular index",
  "Array.set|param|index": "the zero-based position in the list to store the value, eg: 0",
  "Array.set|param|value": "the value to insert, eg: 0",
  "Array.shift": "Remove the first element from an array and return it. This method changes the length of the array.",
  "Array.slice": "Return a section of an array.",
  "Array.slice|param|end": "The end of the specified portion of the array. eg: 0",
  "Array.slice|param|start": "The beginning of the specified portion of the array. eg: 0",
  "Array.some": "Tests whether at least one element in the array passes the test implemented by the provided function.",
  "Array.some|param|callbackfn": "A function that accepts up to two arguments. The some method calls the callbackfn function one time for each element in the array.",
  "Array.sort": "Sort the elements of an array in place and returns the array. The sort is not necessarily stable.",
  "Array.splice": "Remove elements from an array.",
  "Array.splice|param|deleteCount": "The number of elements to remove. eg: 0",
  "Array.splice|param|start": "The zero-based location in the array from which to start removing elements. eg: 0",
  "Array.unshift": "Add one element to the beginning of an array and return the new length of the array.",
  "Array@type": "Add, remove, and replace items in lists.",
  "Boolean.toString": "Returns a string representation of an object.",
  "Buffer.fill": "Fill (a fragment) of the buffer with given value.",
  "Buffer.getNumber": "Read a number in specified format from the buffer.",
  "Buffer.getUint8": "Reads an unsigned byte at a particular location",
  "Buffer.hash": "Compute k-bit FNV-1 non-cryptographic hash of the buffer.",
  "Buffer.isReadOnly": "Returns false when the buffer can be written to.",
  "Buffer.length": "Returns the length of a Buffer object.",
  "Buffer.rotate": "Rotate buffer left in place.\n\n\n\nstart. eg: -1",
  "Buffer.rotate|param|length": "number of elements in buffer. If negative, length is set as the buffer length minus",
  "Buffer.rotate|param|offset": "number of bytes to shift; use negative value to shift right",
  "Buffer.rotate|param|start": "start offset in buffer. Default is 0.",
  "Buffer.setNumber": "Write a number in specified format in the buffer.",
  "Buffer.setUint8": "Writes an unsigned byte at a particular location",
  "Buffer.shift": "Shift buffer left in place, with zero padding.\n\n\n\nstart. eg: -1",
  "Buffer.shift|param|length": "number of elements in buffer. If negative, length is set as the buffer length minus",
  "Buffer.shift|param|offset": "number of bytes to shift; use negative value to shift right",
  "Buffer.shift|param|start": "start offset in buffer. Default is 0.",
  "Buffer.slice": "Return a copy of a fragment of a buffer.",
  "Buffer.toHex": "Convert a buffer to its hexadecimal representation.",
  "Buffer.toString": "Convert a buffer to string assuming UTF8 encoding",
  "Buffer.write": "Write contents of `src` at `dstOffset` in current buffer.",
  "Infinity": "Constant representing positive infinity.",
  "Math": "More complex operations with numbers.",
  "Math.abs": "Returns the absolute value of a number (the value without regard to whether it is positive or negative).\nFor example, the absolute value of -5 is the same as the absolute value of 5.",
  "Math.abs|param|x": "A numeric expression for which the absolute value is needed.",
  "Math.acos": "Returns the arccosine (in radians) of a number",
  "Math.acos|param|x": "A number",
  "Math.asin": "Returns the arcsine (in radians) of a number",
  "Math.asin|param|x": "A number",
  "Math.atan": "Returns the arctangent (in radians) of a number",
  "Math.atan2": "Returns the arctangent of the quotient of its arguments.",
  "Math.atan2|param|x": "A number",
  "Math.atan2|param|y": "A number",
  "Math.atan|param|x": "A number",
  "Math.ceil": "Returns the smallest number greater than or equal to its numeric argument.",
  "Math.ceil|param|x": "A numeric expression.",
  "Math.cos": "Returns the cosine of a number.",
  "Math.cos|param|x": "An angle in radians",
  "Math.exp": "Returns returns ``e^x``.",
  "Math.exp|param|x": "A number",
  "Math.floor": "Returns the greatest number less than or equal to its numeric argument.",
  "Math.floor|param|x": "A numeric expression.",
  "Math.idiv": "Returns the value of integer signed 32 bit division of two numbers.",
  "Math.idiv|param|x": "The first number",
  "Math.idiv|param|y": "The second number",
  "Math.imul": "Returns the value of integer signed 32 bit multiplication of two numbers.",
  "Math.imul|param|x": "The first number",
  "Math.imul|param|y": "The second number",
  "Math.log": "Returns the natural logarithm (base e) of a number.",
  "Math.log|param|x": "A number",
  "Math.max": "Returns the larger of two supplied numeric expressions.",
  "Math.min": "Returns the smaller of two supplied numeric expressions.",
  "Math.pow": "Returns the value of a base expression taken to a specified power.",
  "Math.pow|param|x": "The base value of the expression.",
  "Math.pow|param|y": "The exponent value of the expression.",
  "Math.random": "Returns a pseudorandom number between 0 and 1.",
  "Math.randomRange": "Returns a pseudorandom number between min and max included.\nIf both numbers are integral, the result is integral.",
  "Math.randomRange|param|max": "the upper inclusive bound, eg: 10",
  "Math.randomRange|param|min": "the lower inclusive bound, eg: 0",
  "Math.round": "Returns a supplied numeric expression rounded to the nearest number.",
  "Math.roundWithPrecision": "Rounds ``x`` to a number with the given number of ``digits``",
  "Math.roundWithPrecision|param|digits": "the number of resulting digits",
  "Math.roundWithPrecision|param|x": "the number to round",
  "Math.round|param|x": "The value to be rounded to the nearest number.",
  "Math.sign": "Returns the sign of the x, indicating whether x is positive, negative or zero.",
  "Math.sign|param|x": "The numeric expression to test",
  "Math.sin": "Returns the sine of a number.",
  "Math.sin|param|x": "An angle in radians",
  "Math.sqrt": "Returns the square root of a number.",
  "Math.sqrt|param|x": "A numeric expression.",
  "Math.tan": "Returns the tangent of a number.",
  "Math.tan|param|x": "An angle in radians",
  "Math.trunc": "Returns the number with the decimal part truncated.",
  "Math.trunc|param|x": "A numeric expression.",
  "NaN": "Constant representing Not-A-Number.",
  "Number.isNaN": "Check if a given value is of type Number and it is a NaN.",
  "Number.toString": "Returns a string representation of a number.",
  "Object.keys": "Return the field names in an object.",
  "String": "Combine, split, and search text strings.",
  "String.charAt": "Return the character at the specified index.",
  "String.charAt|param|index": "The zero-based index of the desired character.",
  "String.charCodeAt": "Return the Unicode value of the character at the specified location.",
  "String.charCodeAt|param|index": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
  "String.compare": "See how the order of characters in two strings is different (in ASCII encoding).",
  "String.compare|param|that": "String to compare to target string",
  "String.concat": "Returns a string that contains the concatenation of two or more strings.",
  "String.concat|param|other": "The string to append to the end of the string.",
  "String.fromCharCode": "Make a string from the given ASCII character code.",
  "String.includes": "Determines whether a string contains the characters of a specified string.",
  "String.includes|param|searchValue": "the text to find",
  "String.includes|param|start": "optional start index for the search",
  "String.indexOf": "Returns the position of the first occurrence of a specified value in a string.",
  "String.indexOf|param|searchValue": "the text to find",
  "String.indexOf|param|start": "optional start index for the search",
  "String.isEmpty": "Returns a value indicating if the string is empty",
  "String.length": "Returns the length of a String object.",
  "String.replace": "Return the current string with the first occurence of toReplace\nreplaced with the replacer\n\n\nor a function that accepts the substring and returns the replacement string.",
  "String.replaceAll": "Return the current string with each occurence of toReplace\nreplaced with the replacer\n\n\nor a function that accepts the substring and returns the replacement string.",
  "String.replaceAll|param|replacer": "either the string that replaces toReplace in the current string,",
  "String.replaceAll|param|toReplace": "the substring to replace in the current string",
  "String.replace|param|replacer": "either the string that replaces toReplace in the current string,",
  "String.replace|param|toReplace": "the substring to replace in the current string",
  "String.slice": "Return a substring of the current string.",
  "String.slice|param|end": "one-past-last character index",
  "String.slice|param|start": "first character index; can be negative from counting from the end, eg:0",
  "String.split": "Splits the string according to the separators",
  "String.split|param|separator": "@param limit",
  "String.substr": "Return a substring of the current string.",
  "String.substr|param|length": "number of characters to extract, eg: 10",
  "String.substr|param|start": "first character index; can be negative from counting from the end, eg:0",
  "String.toLowerCase": "Converts the string to lower case characters.",
  "String.trim": "Return a substring of the current string with whitespace removed from both ends",
  "String@type": "Combine, split, and search text strings.",
  "StringMap": "A dictionary from string key to string values",
  "colors": "Add color to your project",
  "colors.choose": "choose a color from a number",
  "colors.choose|param|value": "the hex number",
  "colors.color": "set the shapes inside this block to a particular color",
  "colors.colorScale": "Color scale helps you go between two colors incrementally. \nPick a starting color and an ending color, then choose how many colors you want in your scale.\nUse the colorIndex to choose which color to use. \n* The idea is you can go fromColor red toColor purple, and say there are 6 colors you will use.\nYou can then draw each shape with a different color index to get a variation in colors along the scale. \n* @param fromColor the starting color in your scale",
  "colors.colorScale|param|colorIndex": "which color you want ",
  "colors.colorScale|param|numColors": "how many total colors there are in your scale",
  "colors.colorScale|param|toColor": "the ending color in your scale",
  "colors.colorTemperature": "Kelvin is a temperature unit which is often used as a measure of the colour temperature of light sources. \nBlack bodies at temperatures below about 4000 K appear reddish, whereas those above about 7500 K appear bluish.",
  "colors.color|param|color": "- color to set e.g. 0xc0c0c0",
  "colors.convertFromHSL": "Use a color from an HSL (hue, saturation, and lightness) value.  Using HSL is handy when trying to pick colors from the rainbow, or colors that are similar, but one is darker than the other.",
  "colors.convertFromHSL|param|hue": "the color of the rainbow, represented by an angle on the color wheel - 0 to 360",
  "colors.convertFromHSL|param|lightness": "the amount of light (white) added to the color, on a scale of 0 to 1",
  "colors.convertFromHSL|param|saturation": "the amount of grey added to the color, on a scale of 0 to 1",
  "colors.convertFromHex": "use a color from a web (hex) value.  e.g. #c0c0c0",
  "colors.convertFromHex|param|hex": "hex value",
  "colors.convertFromRGB": "Use a color from a rgb value.",
  "colors.convertFromRGB|param|blue": "blue value",
  "colors.convertFromRGB|param|green": "green value",
  "colors.convertFromRGB|param|red": "red value",
  "colors.rainbowColor": "Use rainbow color in order to go through all the colors of the rainbow in order.\nVery handy to use inside of a for loop.\n\n\nBy default this is set to 20 degrees, so the hues picked will be every 20 degrees on the color wheel.",
  "colors.rainbowColor|param|colorWheelDegrees": "- how many degrees to skip across the color wheel.  ",
  "colors.rainbowColor|param|rainbowColor": "- what index of the rainbow to use.",
  "extraMath": "Some extra helpful maths stuff",
  "extraMath.Phi": "The mathematical constant Phi, the golden ratio.",
  "extraMath.Pi": "The mathematical constant Pi, the circle constant.",
  "extraMath.Sqrt2": "The mathematical constant the square root of 2.",
  "extraMath.arccos": "Inverse sine of angle in degrees",
  "extraMath.arccos|param|x": "cos",
  "extraMath.arcsin": "Inverse sine of angle in degrees",
  "extraMath.arcsin|param|x": "The operand for inverse sin",
  "extraMath.arctan": "Inverse sine of angle in degrees",
  "extraMath.arctan2": "Inverse sine of angle in degrees",
  "extraMath.arctan2|param|x": "The \"adjacent\" operand for inverse tan",
  "extraMath.arctan2|param|y": "The \"opposite\" operand for inverse tan",
  "extraMath.arctan|param|x": "The operand for inverse tan",
  "extraMath.convert": "Convert any number to text",
  "extraMath.cos": "Cosine of angle in degrees",
  "extraMath.cos|param|theta": "The angle in degrees",
  "extraMath.degrees": "Convert an angle in degrees to an angle in degrees",
  "extraMath.degrees|param|angle": "The angle in degrees",
  "extraMath.e": "The mathematical constant e, the exponential constant.",
  "extraMath.ln": "Inverse sine of angle in degrees",
  "extraMath.ln|param|x": "The operand for the natural log",
  "extraMath.log": "Inverse sine of angle in degrees",
  "extraMath.log|param|base": "The base to take the logarithm with respect to",
  "extraMath.log|param|x": "The operand for the log",
  "extraMath.radians": "Convert an angle in degrees to an angle in radians",
  "extraMath.radians|param|angle": "The angle in degrees",
  "extraMath.sin": "Sine of angle in degrees",
  "extraMath.sin|param|theta": "The angle in degrees",
  "extraMath.tan": "Tangent of angle in degrees",
  "extraMath.tan|param|theta": "The angle in degrees",
  "fasteners": "Blocks for making fasteners",
  "fasteners.britishStandardThread": "British Standard Pipe (BSP) is a set of technical standards for screw threads that has been adopted internationally for interconnecting and sealing pipes and fittings by mating an external (male) thread with an internal (female) thread. It has been adopted as standard in plumbing and pipe fitting, except in North America, where NPT and related threads are used. \nSource: Wikipedia\nTo cut threads into a shape, subtract the \"thread cutting tap\" from another shape.",
  "fasteners.britishStandardThread|param|height": "the height of the cylinder",
  "fasteners.britishStandardThread|param|lead": "the number of segments the thread should lead in for",
  "fasteners.britishStandardThread|param|resolution": "the number of radial segments in the thread model",
  "fasteners.britishStandardThread|param|size": "the standard size from British Standard ",
  "fasteners.britishStandardThread|param|threadType": "choose between the screw thread or the interior thread, which can be cut out of another shape",
  "fasteners.metricCoarseThread": "Metric screws (ISO metric screw thread) the most commonly used type of general-purpose screw threads.\nThe \"M\" stnads for the outer diameter of the screw thread, in mm. \n* Coarse threads have a larger pitch (distance between the thread ridges), and are preferred for most applications.\nUse fine threads when you need to add strength or need to prevent loosening.\n* @param threadType  choose between the screw thread or the interior thread, which can be cut out of another shape",
  "fasteners.metricCoarseThread|param|height": "the height of the cylinder",
  "fasteners.metricCoarseThread|param|lead": "the number of segments the thread should lead in for",
  "fasteners.metricCoarseThread|param|resolution": "the number of radial segments in the thread model",
  "fasteners.metricCoarseThread|param|size": "the standard size from British Standard ",
  "fasteners.metricFineThread": "Metric screws (ISO metric screw thread) the most commonly used type of general-purpose screw threads.\nThe \"M\" stnads for the outer diameter of the screw thread, in mm. \n* Coarse threads have a larger pitch (distance between the thread ridges), and are preferred for most applications.\nUse fine threads when you need to add strength or need to prevent loosening.\n* @param thread the type of thread you want",
  "fasteners.metricFineThread|param|height": "the height of the cylinder",
  "fasteners.metricFineThread|param|lead": "the number of segments the thread should lead in for",
  "fasteners.metricFineThread|param|resolution": "the number of radial segments in the thread model",
  "fasteners.metricFineThread|param|size": "the standard size from British Standard ",
  "fasteners.softDrinkBottleThread": "Make a thread compatible with a PET soda bottle.  To cut threads into a shape, subtract the \"thread cutting tap\" from another shape.",
  "fasteners.softDrinkBottleThread|param|height": "the height of the cylinder",
  "fasteners.softDrinkBottleThread|param|lead": "the number of segments the thread should lead in for",
  "fasteners.softDrinkBottleThread|param|resolution": "the number of radial segments in the thread model",
  "fasteners.softDrinkBottleThread|param|threadType": "choose between the screw thread or the lid interior thread",
  "fasteners.thread": "Make a cylinder with an external thread",
  "fasteners.threadCuttingTap": "Make a cylinder with an external thread",
  "fasteners.threadCuttingTap|param|height": "the height of the cylinder",
  "fasteners.threadCuttingTap|param|lead": "the number of segments the thread should lead in for",
  "fasteners.threadCuttingTap|param|resolution": "the number of radial segments in the thread model",
  "fasteners.threadCuttingTap|param|thread": "the type of thread you want",
  "fasteners.thread|param|height": "the height of the cylinder",
  "fasteners.thread|param|lead": "the number of segments the thread should lead in for",
  "fasteners.thread|param|resolution": "the number of radial segments in the thread model",
  "fasteners.thread|param|thread": "the type of thread you want",
  "fasteners.unifiedCoarseThread": "The Unified Thread Standard (UTS) defines a standard thread form and series—along with allowances, \ntolerances, and designations—for screw threads commonly used in the United States and Canada. \nIt is the main standard for bolts, nuts, and a wide variety of other threaded fasteners used in these countries. It has the same 60° profile as the ISO metric screw thread, but the characteristic dimensions of each UTS thread (outer diameter and pitch) were chosen as an inch fraction rather than a millimeter value. \nThe UTS is currently controlled by ASME/ANSI in the United States.\nSource: Wikipedia\n* @param threadType  choose between the screw thread or the interior thread, which can be cut out of another shape",
  "fasteners.unifiedCoarseThread|param|height": "the height of the cylinder",
  "fasteners.unifiedCoarseThread|param|lead": "the number of segments the thread should lead in for",
  "fasteners.unifiedCoarseThread|param|resolution": "the number of radial segments in the thread model",
  "fasteners.unifiedCoarseThread|param|size": "the standard size from British Standard ",
  "fasteners.unifiedExtraFineThread": "The Unified Thread Standard (UTS) defines a standard thread form and series—along with allowances, \ntolerances, and designations—for screw threads commonly used in the United States and Canada. \nIt is the main standard for bolts, nuts, and a wide variety of other threaded fasteners used in these countries. It has the same 60° profile as the ISO metric screw thread, but the characteristic dimensions of each UTS thread (outer diameter and pitch) were chosen as an inch fraction rather than a millimeter value. \nThe UTS is currently controlled by ASME/ANSI in the United States.\nSource: Wikipedia\n* @param threadType  choose between the screw thread or the interior thread, which can be cut out of another shape",
  "fasteners.unifiedExtraFineThread|param|height": "the height of the cylinder",
  "fasteners.unifiedExtraFineThread|param|lead": "the number of segments the thread should lead in for",
  "fasteners.unifiedExtraFineThread|param|resolution": "the number of radial segments in the thread model",
  "fasteners.unifiedExtraFineThread|param|size": "the standard size from British Standard ",
  "fasteners.unifiedFineThread": "The Unified Thread Standard (UTS) defines a standard thread form and series—along with allowances, \ntolerances, and designations—for screw threads commonly used in the United States and Canada. \nIt is the main standard for bolts, nuts, and a wide variety of other threaded fasteners used in these countries. It has the same 60° profile as the ISO metric screw thread, but the characteristic dimensions of each UTS thread (outer diameter and pitch) were chosen as an inch fraction rather than a millimeter value. \nThe UTS is currently controlled by ASME/ANSI in the United States.\nSource: Wikipedia\n* @param threadType  choose between the screw thread or the interior thread, which can be cut out of another shape",
  "fasteners.unifiedFineThread|param|height": "the height of the cylinder",
  "fasteners.unifiedFineThread|param|lead": "the number of segments the thread should lead in for",
  "fasteners.unifiedFineThread|param|resolution": "the number of radial segments in the thread model",
  "fasteners.unifiedFineThread|param|size": "the standard size from British Standard ",
  "fasteners.unifiedNumberedThread": "The Unified Thread Standard (UTS) defines a standard thread form and series—along with allowances, \ntolerances, and designations—for screw threads commonly used in the United States and Canada. \nIt is the main standard for bolts, nuts, and a wide variety of other threaded fasteners used in these countries. It has the same 60° profile as the ISO metric screw thread, but the characteristic dimensions of each UTS thread (outer diameter and pitch) were chosen as an inch fraction rather than a millimeter value. \nThe UTS is currently controlled by ASME/ANSI in the United States.\nSource: Wikipedia\n* @param threadType  choose between the screw thread or the interior thread, which can be cut out of another shape",
  "fasteners.unifiedNumberedThread|param|height": "the height of the cylinder",
  "fasteners.unifiedNumberedThread|param|lead": "the number of segments the thread should lead in for",
  "fasteners.unifiedNumberedThread|param|resolution": "the number of radial segments in the thread model",
  "fasteners.unifiedNumberedThread|param|size": "the standard size from British Standard ",
  "operators": "Move and rotate shapes",
  "operators.addShapes": "Add shapes together. Sometimes called \"union\".",
  "operators.addShapes|param|body": "List of shapes to add",
  "operators.enlargeShapes": "Move shapes in three dimensions",
  "operators.enlargeShapes|param|body": "The list of shapes to enlarge",
  "operators.enlargeShapes|param|x": "How much to enlarge in x",
  "operators.enlargeShapes|param|y": "How much to enlarge in y",
  "operators.enlargeShapes|param|z": "How much to enlarge in z",
  "operators.hollowShapes": "Hollows out a part",
  "operators.hollowShapes|param|body": "the shapes to move up",
  "operators.hollowShapes|param|insideRound": "the radius to use on the inside",
  "operators.hollowShapes|param|wallThickness": "how thick to make the walls",
  "operators.intersectShapes": "Intersect shapes - only leave the parts from all shapes that overlap.",
  "operators.intersectShapes|param|body": "List of shapes to intersect",
  "operators.linearExtrude": "Give a 2D shape height, optionally twist it",
  "operators.linearExtrude|param|height": "The height of the extrusion",
  "operators.linearExtrude|param|slices": "Defines resolution of the twist",
  "operators.linearExtrude|param|twist": "The angle to twist the extrusion",
  "operators.move": "move shapes in mm in axis",
  "operators.move|param|body": "the shapes to move across",
  "operators.move|param|mm": "how far to move across the axis",
  "operators.placeOnGround": "Take all shapes inside this block and move them as a group so that they are on the ground.",
  "operators.placeOnGround|param|body": "the shapes to move",
  "operators.rotateExtrude": "For 2D shapes, apply a shrinkwrapping technique to join them together.  Also known as hull.",
  "operators.rotateExtrude|param|body": "List of 2D shapes to shrink wrap",
  "operators.rotateShapes": "Perform a rotation in X, Y and Z axis",
  "operators.rotateShapes|param|body": "The shapes to rotate",
  "operators.rotateShapes|param|x": "Rotation in X, degrees",
  "operators.rotateShapes|param|y": "Rotation in X, degrees",
  "operators.rotateShapes|param|z": "Rotation in X, degrees",
  "operators.scaleShapes": "Move shapes in three dimensions",
  "operators.scaleShapes|param|body": "The list of shapes to move",
  "operators.scaleShapes|param|x": "How much to scale in x",
  "operators.scaleShapes|param|y": "How much to scale in y",
  "operators.scaleShapes|param|z": "How much to scale in z",
  "operators.sequentialWrap2DShapes": "For 2D shapes, apply a shrink wrapping function one at a time to get a progressive effect.  Also known as \"chain hull\"",
  "operators.sequentialWrap2DShapes|param|body": "The list of 2d shapes to sequentially shrink wrap",
  "operators.setPosition": "Move all shapes to lie on the XY Plane at Z = 0. A Great last thing to check before 3D Printing.",
  "operators.setPosition|param|body": "the shapes to move up",
  "operators.setPosition|param|x": "the x position to move shapes to",
  "operators.setPosition|param|y": "the y position to move shapes to",
  "operators.setPosition|param|z": "the z position to move shapes to",
  "operators.stack": "move shapes up the z axis",
  "operators.stack|param|axis": "the axis to stack in",
  "operators.stack|param|body": "the shapes to move up",
  "operators.stack|param|direction": "the direction to stack",
  "operators.styleEdges": "Either chamfers or fillets the edges in the Z axis",
  "operators.styleEdges|param|body": "the shapes to move up",
  "operators.styleEdges|param|direction": "the direction to stack",
  "operators.styleEdges|param|radius": "the radius to use",
  "operators.subtractShapes": "Cut shapes away from the first shape in the list.  Sometimes called \"difference\"",
  "operators.subtractShapes|param|body": "List of shapes to subtract",
  "operators.translateShapes": "Move shapes in three dimensions",
  "operators.translateShapes|param|body": "The list of shapes to move",
  "operators.translateShapes|param|x": "How far to move across in x",
  "operators.translateShapes|param|y": "How far to move over in y",
  "operators.translateShapes|param|z": "How far to move up in z",
  "operators.turn": "Flip along the X axis",
  "operators.turn|param|body": "the shapes to rotate",
  "operators.wrap2DShapes": "For 2D shapes, apply a shrinkwrapping technique to join them together.  Also known as hull.",
  "operators.wrap2DShapes|param|body": "List of 2D shapes to shrink wrap",
  "operators.wrapShapes": "Wrap shapes - cover all the shapes, leaving only the outermost edges.  Sometimes called \"quick hull\" or \"convex hull\".",
  "operators.wrapShapes|param|body": "List of shapes to intersect",
  "parameters": "Parameters for making customizable objects",
  "parameters.numberParameter": "Add text input parameter",
  "parameters.numberParameter|param|defaultValue": "The default value for the number input field",
  "parameters.numberParameter|param|parameterName": "The label for number input field",
  "parameters.numberRangeParameter": "Add text input parameter",
  "parameters.numberRangeParameter|param|defaultValue": "The default text for the text input field",
  "parameters.numberRangeParameter|param|maxValue": "The maximum value of the slider",
  "parameters.numberRangeParameter|param|minValue": "The minimum value of the slider",
  "parameters.numberRangeParameter|param|parameterName": "The label for slider",
  "parameters.numberRangeParameter|param|stepValue": "The default value of the slider",
  "parameters.textParameter": "Add text input parameter",
  "parameters.textParameter|param|characterLimit": "The character limit to apply to the text input. (0 means no limit)",
  "parameters.textParameter|param|defaultText": "The default text for the text input field",
  "parameters.textParameter|param|parameterName": "The label for text input field",
  "parseFloat": "Convert a string to a number.",
  "parseInt": "Convert a string to an integer.\n\n\nIf this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal.\nAll other strings are considered decimal.",
  "parseInt|param|radix": "optional A value between 2 and 36 that specifies the base of the number in text.",
  "parseInt|param|text": "A string to convert into an integral number. eg: \"123\"",
  "randint": "Returns a pseudorandom number between min and max included.\nIf both numbers are integral, the result is integral.",
  "randint|param|max": "the upper inclusive bound, eg: 10",
  "randint|param|min": "the lower inclusive bound, eg: 0",
  "shapes": "How to set fields and colours\n@external https://makecode.com/playground#basic-default-values\n@external https://makecode.com/extensions/getting-started/simple-extension\n@external https://makecode.com/defining-blocks\nuse the playground to configure the pickers\n\n3D Shapes to create on the surface",
  "shapes.arc": "Make an arc (pie chart piece) - from an starting angle to end angle",
  "shapes.arc|param|color": "The color of the pie slice",
  "shapes.arc|param|endAngle": "The end angle (in degrees)",
  "shapes.arc|param|faces": "The resolution of the pie slice.  The more faces it has, the slower it will draw. ",
  "shapes.arc|param|height": "The thickness of your pie slice ",
  "shapes.arc|param|radius": "The radius of the circle",
  "shapes.arc|param|startAngle": "The starting angle (in degrees)",
  "shapes.cone": "Make a cone like shape that is as tall as height.  The cone will be twice as wide as the radius.",
  "shapes.cone|param|color": "The color to use for the cone",
  "shapes.cone|param|faces": "The number of faces the cone has.  The more it has, the smoother it is, but longer it takes to render.  So choose wisely!",
  "shapes.cone|param|height": "How high to make the cone",
  "shapes.cone|param|radius": "The radius of the cone",
  "shapes.cube": "The cube, (or more technically a rectangular prism) allows you to make box like shapes.",
  "shapes.cube|param|color": "If specified, what color to make the cube.  In hex (0xab1234)",
  "shapes.cube|param|depth": "The depth of the cube",
  "shapes.cube|param|height": "The height of the cube",
  "shapes.cube|param|width": "The width of the cube",
  "shapes.cylinder": "Add a cylinder",
  "shapes.cylinder|param|color": "The color of the cylinder in hex (0xab1234)",
  "shapes.cylinder|param|faces": "The number of faces the cylinder has.  The more it has, the smoother it is, but longer it takes to render.  So choose wisely!",
  "shapes.cylinder|param|height": "How tall to make the cylinder",
  "shapes.cylinder|param|radius": "The radius (distance from center to edge) of the cylinder",
  "shapes.cylinder|param|radius2": "If specified, make the bottom of the cylinder have a different size",
  "shapes.donut": "Add a donut (torus)",
  "shapes.donut|param|color": "Color (in hex 0xab12345)",
  "shapes.donut|param|innerFaces": "How many faces on the inside of the object",
  "shapes.donut|param|innerRotation": "How far to turn the inside (useful if the number of inner faces is small)",
  "shapes.donut|param|outerFaces": "How many faces on the outside of the object",
  "shapes.donut|param|radius": "The radius of the donut",
  "shapes.donut|param|thickness": "How thick to make the donut",
  "shapes.polygon3D": "Add a triangular prism (roof)",
  "shapes.polygon3D|param|color": "If specified, what color to make the cube.  In hex (0xab1234)",
  "shapes.polygon3D|param|height": "The height of the cube",
  "shapes.polygon3D|param|radius": "The depth of the cube",
  "shapes.polygon3D|param|sides": "The width of the cube",
  "shapes.polyhedron": "Creates a polyhedron",
  "shapes.polyhedron|param|color": "If specified, what color to make the cube.  In hex (0xab1234)",
  "shapes.polyhedron|param|radius": "the radius to use",
  "shapes.regularPolygon": "regular polygon",
  "shapes.regularPolygon|param|radius": "the distance from the center",
  "shapes.regularPolygon|param|sides": "the number of sides to make",
  "shapes.sphere": "Add a sphere",
  "shapes.sphere|param|color": "The color to make the sphere",
  "shapes.sphere|param|faces": "How many faces to use to make the sphere.  The more you use the longer it takes to render, so choose wisely!",
  "shapes.sphere|param|radius": "The distance from the center to the edge of the sphere ",
  "shapes.sphere|param|type": "Whether to use geodesic or icosahedron.  Geodesic is more triangular and has a golf-ball like appearance.",
  "shapes.text": "Add text",
  "shapes.text|param|color": "The color of the text",
  "shapes.text|param|height": "How tall to extrude the text",
  "shapes.text|param|lineWidth": "How thick to make the text",
  "shapes.text|param|text": "The text to add",
  "shapes.triangleRamp": "Add a triangular prism (ramp)",
  "shapes.triangleRamp|param|color": "If specified, what color to make the cube.  In hex (0xab1234)",
  "shapes.triangleRamp|param|depth": "The depth of the cube",
  "shapes.triangleRamp|param|height": "The height of the cube",
  "shapes.triangleRamp|param|width": "The width of the cube",
  "shapes.triangleRoof": "Add a triangular prism (roof)",
  "shapes.triangleRoof|param|color": "If specified, what color to make the cube.  In hex (0xab1234)",
  "shapes.triangleRoof|param|depth": "The depth of the cube",
  "shapes.triangleRoof|param|height": "The height of the cube",
  "shapes.triangleRoof|param|width": "The width of the cube",
  "shapes.tube": "Add a tube with a flat top and bottom\nFor non-circular tubes, lower the sides.\ne.g. Set the sides to 6 to get hexagonal tubes!",
  "shapes.tube|param|color": "Color (in hex 0xab12345)",
  "shapes.tube|param|height": "The height of the tube",
  "shapes.tube|param|radius": "The radius of the tube",
  "shapes.tube|param|sides": "How many sides on the object",
  "shapes.tube|param|thickness": "How thick to make the walls of the tube"
}